# Loading librarys and whatnot

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import validation_curve
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
import matplotlib.pyplot as plt
import seaborn as sns

import keras
from keras.datasets import mnist
from keras.models import Model
from keras.layers import Dense, Input
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten
from keras import backend as k
from keras.utils import to_categorical
import time
from keras.datasets import mnist

##############################################################################################
 CNN
##############################################################################################

#loading Data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
y_train.shape

# Reshaping data into proccesable format
img_rows, img_cols=28, 28
 
if k.image_data_format() == 'channels_first':
   x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
   x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
   inpx = (1, img_rows, img_cols)
 
else:
   x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
   x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
   inpx = (img_rows, img_cols, 1)
 
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

# Normalization
x_train /= 255
x_test /= 255

#to cat
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)


# The CNN model layers 
inpx = Input(shape=inpx)
layer1 = Conv2D(32, kernel_size=(3, 3), activation='relu')(inpx)
layer2 = Conv2D(64, (3, 3), activation='relu')(layer1)
layer3 = MaxPooling2D(pool_size=(3, 3))(layer2)
layer4 = Dropout(0.5)(layer3)
layer5 = Flatten()(layer4)
layer6 = Dense(250, activation='sigmoid')(layer5)
layer7 = Dense(10, activation='softmax')(layer6)


# Recording the start and end times and running the models 
start = time.time()
model = Model([inpx], layer7)
model.compile(optimizer=keras.optimizers.Adam(),
              loss=keras.losses.categorical_crossentropy,
              metrics=['accuracy'])
 
model_history = model.fit(x_train, y_train, epochs=8, batch_size=500)
end = time.time()
print(end-start)

# Graph of our test and accuracy
pd.DataFrame(model_history.history).plot()

#Printing out our loss and accuracy
score = model.evaluate(x_test, y_test, verbose=0)
print('loss=', score[0])
print('accuracy=', score[1])

# Confusion Matrix on training data
fig = plt.figure(figsize=(10, 10)) 

y_train_pred = model.predict(x_train)

Y_train_pred = np.argmax(y_train_pred, 1) # Decode Predicted labels
Y_train = np.argmax(y_train, 1) # Decode labels

mat = confusion_matrix(Y_train, Y_train_pred) # Confusion matrix

# Plot Confusion matrix
sns.heatmap(mat.T, square=True, annot=True, cbar=False, cmap=plt.cm.Blues)
plt.xlabel('Predicted Values')
plt.ylabel('True Values')
plt.show()

print(classification_report(Y_train, Y_train_pred))

# Doing the same on the test data
fig = plt.figure(figsize=(10, 10)) 

y_pred = model.predict(x_test)

Y_pred = np.argmax(y_pred, 1) # Decode Predicted labels
Y_test = np.argmax(y_test, 1) # Decode labels

mat = confusion_matrix(Y_test, Y_pred) # Confusion matrix

# Plot Confusion matrix
sns.heatmap(mat.T, square=True, annot=True, cbar=False, cmap=plt.cm.Blues)
plt.xlabel('Predicted Values')
plt.ylabel('True Values')
plt.show()

print(classification_report(Y_test, Y_pred))

##############################################################################################
SVM
##############################################################################################

#formating our data to work for SVM
X_train = x_train.reshape(-1, 28*28)
X_test = x_test.reshape(-1, 28*28)
y_train = y_train.astype('int')
y_test = y_test.astype('int')
y_train.shape

# SVM model fitting, predicting and accuracy
start = time.time()

classifier = SVC()

# Train the classifier
classifier.fit(X_train, y_train)

y_train_pred = classifier.predict(X_train)

end = time.time()
print(end-start)

accuracy_train = accuracy_score(y_train, y_train_pred)
print(accuracy_train)

print(classification_report(y_train, y_train_pred))

# Make predictions on the test data
y_test_pred = classifier.predict(X_test)

# Calculate accuracy
accuracy_test = accuracy_score(y_test, y_test_pred)
print(accuracy_test)
print(classification_report(y_test, y_test_pred))

# Confusion matrix
fig = plt.figure(figsize=(10, 10)) 

#Y_pred = np.argmax(y_pred, 1) # Decode Predicted labels
#Y_test = np.argmax(y_test, 1) # Decode labels

mat = confusion_matrix(y_train, y_train_pred) # Confusion matrix

# Plot Confusion matrix train
sns.heatmap(mat.T, square=True, annot=True, cbar=False, cmap=plt.cm.Blues)
plt.xlabel('Predicted Values')
plt.ylabel('True Values')
plt.show()


# confusion matriz test
fig = plt.figure(figsize=(10, 10)) 

#Y_pred = np.argmax(y_pred, 1) # Decode Predicted labels
#Y_test = np.argmax(y_test, 1) # Decode labels

mat = confusion_matrix(y_test, y_test_pred) # Confusion matrix

# Plot Confusion matrix
sns.heatmap(mat.T, square=True, annot=True, cbar=False, cmap=plt.cm.Blues)
plt.xlabel('Predicted Values')
plt.ylabel('True Values')
plt.show()
